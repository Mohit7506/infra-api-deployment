---
- name: Provision and configure IMAGO servers
  hosts: all
  become: true
  vars:
    api_nodeport: 30080
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic packages
      apt:
        name:
          - curl
          - wget
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes

# ==============================
# Load Balancer setup
# ==============================
- name: Setup load balancer (nginx) on LB host
  hosts: lb
  become: true
  vars:
    api_nodeport: 30080
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Create ssl dir
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0755'

    - name: Generate self-signed cert (if missing)
      command: >
        openssl req -x509 -nodes -days 365
        -subj "/C=US/ST=State/L=City/O=IMAGO/CN=imago.local"
        -newkey rsa:2048 -keyout /etc/nginx/ssl/imago.key -out /etc/nginx/ssl/imago.crt
      args:
        creates: /etc/nginx/ssl/imago.crt

    - name: Deploy nginx site config
      copy:
        dest: /etc/nginx/sites-available/media.conf
        content: |
          server {
              listen 80;
              server_name _;
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name _;

              ssl_certificate /etc/nginx/ssl/imago.crt;
              ssl_certificate_key /etc/nginx/ssl/imago.key;

              client_max_body_size 200M;

              location / {
                  proxy_pass http://{{ groups['webservers'][0] }}:{{ api_nodeport }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: reload nginx

    - name: Enable site
      file:
        src: /etc/nginx/sites-available/media.conf
        dest: /etc/nginx/sites-enabled/media.conf
        state: link
      notify: reload nginx

    - name: Remove default site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: restarted

# ==============================
# Webservers setup
# ==============================
- name: Setup webservers (server A & B) - Docker + k3s + Zabbix
  hosts: webservers
  become: true
  tasks:
    - name: Install Docker prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install docker engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Ensure docker started
      service:
        name: docker
        state: started
        enabled: yes

    # Master install
    - name: Install k3s on first node (server A)
      when: inventory_hostname == groups['webservers'][0]
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for kubeconfig to be available on master
      when: inventory_hostname == groups['webservers'][0]
      wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        timeout: 60

    # Worker join setup
    - name: Retrieve k3s token from master (local action)
      when: inventory_hostname != groups['webservers'][0]
      local_action: >
        command ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_imago
        ubuntu@{{ groups['webservers'][0] }}
        "sudo cat /var/lib/rancher/k3s/server/node-token"
      register: k3s_token
      changed_when: false

    - name: Create k3s config directory
      when: inventory_hostname != groups['webservers'][0]
      file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'

    - name: Write k3s config.yaml for worker
      when: inventory_hostname != groups['webservers'][0]
      copy:
        dest: /etc/rancher/k3s/config.yaml
        content: |
          server: https://{{ groups['webservers'][0] }}:6443
          token: {{ k3s_token.stdout }}
          node-name: {{ inventory_hostname }}
        owner: root
        group: root
        mode: '0644'

    - name: Install k3s agent
      when: inventory_hostname != groups['webservers'][0]
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="agent" sh -
      args:
        creates: /usr/local/bin/k3s-agent

      
    # ==============================
    # Zabbix installation + log fix
    # ==============================
    - name: Check if zabbix-agent is available in apt cache
      shell: apt-cache show zabbix-agent
      register: zabbix_pkg_check
      ignore_errors: true
      changed_when: false

    - name: Install zabbix-agent from apt if available
      apt:
        name: zabbix-agent
        state: present
        update_cache: yes
      when: zabbix_pkg_check.rc == 0

    - name: Add zabbix repo and install if not available
      when: zabbix_pkg_check.rc != 0
      block:
        - name: Download zabbix release deb
          get_url:
            url: https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-1+{{ ansible_distribution_release }}_all.deb
            dest: /tmp/zabbix-release.deb
        - name: Install zabbix-release
          apt:
            deb: /tmp/zabbix-release.deb
        - name: Update apt cache
          apt:
            update_cache: yes
        - name: Install zabbix-agent from repo
          apt:
            name: zabbix-agent
            state: present

    - name: Ensure Zabbix log directory exists
      file:
        path: /var/log/zabbix
        state: directory
        owner: zabbix
        group: zabbix
        mode: '0755'

    - name: Comment out existing Server= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^Server='
        state: absent
        backrefs: yes
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing ServerActive= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^ServerActive='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing Hostname= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^Hostname='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing LogType= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^LogType='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing LogFile= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^LogFile='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing LogFileSize= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^LogFileSize='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Comment out existing Include= line if present
      lineinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        regexp: '^Include='
        state: absent
        backup: yes
        insertafter: BOF
      notify: restart zabbix

    - name: Configure zabbix_agentd.conf
      blockinfile:
        path: /etc/zabbix/zabbix_agentd.conf
        block: |
          Server={{ zabbix_server_ip }}
          ServerActive={{ zabbix_server_ip }}
          Hostname={{ inventory_hostname }}
          LogType=file
          LogFile=/var/log/zabbix/zabbix_agentd.log
          LogFileSize=0
          Include=/etc/zabbix/zabbix_agentd.conf.d/*.conf
      notify: restart zabbix

    - name: Ensure zabbix-agent started
      service:
        name: zabbix-agent
        enabled: yes
        state: started

  handlers:
    - name: restart zabbix
      service:
        name: zabbix-agent
        state: restarted

