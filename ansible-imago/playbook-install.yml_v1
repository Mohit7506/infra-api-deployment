---
- name: Provision and configure IMAGO servers
  hosts: all
  become: true
  vars:
    api_nodeport: 30080
    zabbix_server_ip: "{{ hostvars[groups['zabbix'][0]]['ansible_host'] if groups['zabbix'] is defined else '192.168.10.5' }}"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic packages
      apt:
        name:
          - curl
          - wget
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes

- name: Setup load balancer (nginx) on LB host
  hosts: lb
  become: true
  vars:
    api_nodeport: 30080
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Create ssl dir
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0755'

    - name: Generate self-signed cert (if missing)
      command: >
        openssl req -x509 -nodes -days 365
        -subj "/C=US/ST=State/L=City/O=IMAGO/CN=imago.local"
        -newkey rsa:2048 -keyout /etc/nginx/ssl/imago.key -out /etc/nginx/ssl/imago.crt
      args:
        creates: /etc/nginx/ssl/imago.crt

    - name: Deploy nginx site config
      copy:
        dest: /etc/nginx/sites-available/media.conf
        content: |
          server {
              listen 80;
              server_name _;
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name _;

              ssl_certificate /etc/nginx/ssl/imago.crt;
              ssl_certificate_key /etc/nginx/ssl/imago.key;

              client_max_body_size 200M;

              location / {
                  proxy_pass http://{{ groups['webservers'][0] }}:{{ api_nodeport }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify: reload nginx

    - name: Enable site
      file:
        src: /etc/nginx/sites-available/media.conf
        dest: /etc/nginx/sites-enabled/media.conf
        state: link
      notify: reload nginx

    - name: Remove default site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: restarted

- name: Setup webservers (server A & B) - Docker+k3s+Zabbix
  hosts: webservers
  become: true
  tasks:
    - name: Install Docker prerequisites
      apt:
        name: [ "ca-certificates", "curl", "gnupg", "lsb-release" ]
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install docker engine
      apt:
        name: [ "docker-ce", "docker-ce-cli", "containerd.io" ]
        state: present
        update_cache: yes

    - name: Ensure docker started
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install k3s on first node (server A)
      when: inventory_hostname == groups['webservers'][0]
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for kubeconfig to be available on master
      when: inventory_hostname == groups['webservers'][0]
      wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        timeout: 60

    - name: Retrieve k3s token from master (local action)
      when: inventory_hostname != groups['webservers'][0]
      local_action: command ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_imago ubuntu@{{ groups['webservers'][0] }} "sudo cat /var/lib/rancher/k3s/server/node-token"
      register: k3s_token
      changed_when: false

    - name: Join as k3s agent (other nodes)
      when: inventory_hostname != groups['webservers'][0]
      shell: |
        K3S_URL="https://{{ groups['webservers'][0] }}:6443" K3S_TOKEN="{{ k3s_token.stdout }}" \
        curl -sfL https://get.k3s.io | sh -
      args:
        creates: /var/lib/rancher/k3s

    - name: Install Zabbix agent (apt first, fallback to repo)
      block:
        - name: Check if zabbix-agent is available in apt
          command: apt-cache show zabbix-agent
          register: zabbix_pkg_check
          ignore_errors: true
          changed_when: false

        - name: Install zabbix-agent from apt
          apt:
            name: zabbix-agent
            state: present
            update_cache: yes
          when: zabbix_pkg_check.rc == 0

        - name: Install Zabbix agent from official repo
          when: zabbix_pkg_check.rc != 0
          block:
            - name: Download zabbix release deb
              get_url:
                url: "https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-1+{{ ansible_distribution_release }}_all.deb"
                dest: /tmp/zabbix-release.deb
            - name: Install zabbix-release
              apt:
                deb: /tmp/zabbix-release.deb
            - name: Update apt cache
              apt:
                update_cache: yes
            - name: Install zabbix-agent
              apt:
                name: zabbix-agent
                state: present
      rescue:
        - debug:
            msg: "Zabbix agent installation failed; check manually."

    - name: Configure zabbix_agentd.conf
      copy:
        dest: /etc/zabbix/zabbix_agentd.conf
        content: |
          Server={{ zabbix_server_ip }}
          ServerActive={{ zabbix_server_ip }}
          Hostname={{ inventory_hostname }}
          Include=/etc/zabbix/zabbix_agentd.d/*.conf
      notify: restart zabbix

    - name: Ensure zabbix-agent started
      service:
        name: zabbix-agent
        enabled: yes
        state: started
      ignore_errors: yes

  handlers:
    - name: restart zabbix
      service:
        name: zabbix-agent
        state: restarted

